:py:mod:`nwm22_grid`
====================

.. py:module:: nwm22_grid


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   nwm22_grid.LandAssimVariablesEnum
   nwm22_grid.LandShortVariablesEnum
   nwm22_grid.LandMediumVariablesEnum
   nwm22_grid.LandLongVariablesEnum
   nwm22_grid.ForcingVariablesEnum
   nwm22_grid.ShortAndAnalysisOutputEnum
   nwm22_grid.MediumOutputEnum
   nwm22_grid.LongOutputEnum
   nwm22_grid.ForcingOutputEnum
   nwm22_grid.Analysis
   nwm22_grid.ShortRange
   nwm22_grid.MediumRange
   nwm22_grid.LongRange
   nwm22_grid.Forcing
   nwm22_grid.ConfigurationsEnum
   nwm22_grid.GridConfigurationModel




Attributes
~~~~~~~~~~

.. autoapisummary::

   nwm22_grid.configuration


.. py:class:: LandAssimVariablesEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: ACCET
      :value: 'ACCET'



   .. py:attribute:: ACSNOM
      :value: 'ACSNOM'



   .. py:attribute:: EDIR
      :value: 'EDIR'



   .. py:attribute:: FSNO
      :value: 'FSNO'



   .. py:attribute:: ISNOW
      :value: 'ISNOW'



   .. py:attribute:: QRAIN
      :value: 'QRAIN'



   .. py:attribute:: QSNOW
      :value: 'QSNOW'



   .. py:attribute:: SNEQV
      :value: 'SNEQV'



   .. py:attribute:: SNLIQ
      :value: 'SNLIQ'



   .. py:attribute:: SNOWH
      :value: 'SNOWH'



   .. py:attribute:: SNOWT_AVG
      :value: 'SNOWT_AVG'



   .. py:attribute:: SOILICE
      :value: 'SOILICE'



   .. py:attribute:: SOILSAT_TOP
      :value: 'SOILSAT_TOP'



   .. py:attribute:: SOIL_M
      :value: 'SOIL_M'



   .. py:attribute:: SOIL_T
      :value: 'SOIL_T'




.. py:class:: LandShortVariablesEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: ACCET
      :value: 'ACCET'



   .. py:attribute:: SNOWT_AVG
      :value: 'SNOWT_AVG'



   .. py:attribute:: SOILSAT_TOP
      :value: 'SOILSAT_TOP'



   .. py:attribute:: FSNO
      :value: 'FSNO'



   .. py:attribute:: SNOWH
      :value: 'SNOWH'



   .. py:attribute:: SNEQV
      :value: 'SNEQV'




.. py:class:: LandMediumVariablesEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: FSA
      :value: 'FSA'



   .. py:attribute:: FIRA
      :value: 'FIRA'



   .. py:attribute:: GRDFLX
      :value: 'GRDFLX'



   .. py:attribute:: HFX
      :value: 'HFX'



   .. py:attribute:: LH
      :value: 'LH'



   .. py:attribute:: UGDRNOFF
      :value: 'UGDRNOFF'



   .. py:attribute:: ACCECAN
      :value: 'ACCECAN'



   .. py:attribute:: ACCEDIR
      :value: 'ACCEDIR'



   .. py:attribute:: ACCETRAN
      :value: 'ACCETRAN'



   .. py:attribute:: TRAD
      :value: 'TRAD'



   .. py:attribute:: SNLIQ
      :value: 'SNLIQ'



   .. py:attribute:: SOIL_T
      :value: 'SOIL_T'



   .. py:attribute:: SOIL_M
      :value: 'SOIL_M'



   .. py:attribute:: SNOWH
      :value: 'SNOWH'



   .. py:attribute:: SNEQV
      :value: 'SNEQV'



   .. py:attribute:: ISNOW
      :value: 'ISNOW'



   .. py:attribute:: FSNO
      :value: 'FSNO'



   .. py:attribute:: ACSNOM
      :value: 'ACSNOM'



   .. py:attribute:: ACCET
      :value: 'ACCET'



   .. py:attribute:: CANWAT
      :value: 'CANWAT'



   .. py:attribute:: SOILICE
      :value: 'SOILICE'



   .. py:attribute:: SOILSAT_TOP
      :value: 'SOILSAT_TOP'



   .. py:attribute:: SNOWT_AVG
      :value: 'SNOWT_AVG'




.. py:class:: LandLongVariablesEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: UGDRNOFF
      :value: 'UGDRNOFF'



   .. py:attribute:: SFCRNOFF
      :value: 'SFCRNOFF'



   .. py:attribute:: SNEQV
      :value: 'SNEQV'



   .. py:attribute:: ACSNOM
      :value: 'ACSNOM'



   .. py:attribute:: ACCET
      :value: 'ACCET'



   .. py:attribute:: CANWAT
      :value: 'CANWAT'



   .. py:attribute:: SOILSAT_TOP
      :value: 'SOILSAT_TOP'



   .. py:attribute:: SOILSAT
      :value: 'SOILSAT'




.. py:class:: ForcingVariablesEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: U2D
      :value: 'U2D'



   .. py:attribute:: V2D
      :value: 'V2D'



   .. py:attribute:: T2D
      :value: 'T2D'



   .. py:attribute:: Q2D
      :value: 'Q2D'



   .. py:attribute:: LWDOWN
      :value: 'LWDOWN'



   .. py:attribute:: SWDOWN
      :value: 'SWDOWN'



   .. py:attribute:: RAINRATE
      :value: 'RAINRATE'



   .. py:attribute:: PSFC
      :value: 'PSFC'




.. py:class:: ShortAndAnalysisOutputEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: land
      :value: 'land'




.. py:class:: MediumOutputEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: land_1
      :value: 'land_1'



   .. py:attribute:: land_2
      :value: 'land_2'



   .. py:attribute:: land_3
      :value: 'land_3'



   .. py:attribute:: land_4
      :value: 'land_4'



   .. py:attribute:: land_5
      :value: 'land_5'



   .. py:attribute:: land_6
      :value: 'land_6'



   .. py:attribute:: land_7
      :value: 'land_7'




.. py:class:: LongOutputEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: land_1
      :value: 'land_1'



   .. py:attribute:: land_2
      :value: 'land_2'



   .. py:attribute:: land_3
      :value: 'land_3'



   .. py:attribute:: land_4
      :value: 'land_4'




.. py:class:: ForcingOutputEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: forcing
      :value: 'forcing'




.. py:class:: Analysis(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: output_type
      :type: ShortAndAnalysisOutputEnum



   .. py:attribute:: land
      :type: Optional[LandAssimVariablesEnum]




.. py:class:: ShortRange(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: output_type
      :type: ShortAndAnalysisOutputEnum



   .. py:attribute:: land
      :type: Optional[LandShortVariablesEnum]




.. py:class:: MediumRange(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: output_type
      :type: MediumOutputEnum



   .. py:attribute:: land_1
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_2
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_3
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_4
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_5
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_6
      :type: Optional[LandMediumVariablesEnum]



   .. py:attribute:: land_7
      :type: Optional[LandMediumVariablesEnum]




.. py:class:: LongRange(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: output_type
      :type: LongOutputEnum



   .. py:attribute:: land_1
      :type: Optional[LandLongVariablesEnum]



   .. py:attribute:: land_2
      :type: Optional[LandLongVariablesEnum]



   .. py:attribute:: land_3
      :type: Optional[LandLongVariablesEnum]



   .. py:attribute:: land_4
      :type: Optional[LandLongVariablesEnum]




.. py:class:: Forcing(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: output_type
      :type: ForcingOutputEnum



   .. py:attribute:: forcing
      :type: Optional[ForcingVariablesEnum]




.. py:class:: ConfigurationsEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   .. py:attribute:: analysis_assim
      :value: 'analysis_assim'



   .. py:attribute:: analysis_assim_no_da
      :value: 'analysis_assim_no_da'



   .. py:attribute:: analysis_assim_extend
      :value: 'analysis_assim_extend'



   .. py:attribute:: analysis_assim_extend_no_da
      :value: 'analysis_assim_extend_no_da'



   .. py:attribute:: analysis_assim_long
      :value: 'analysis_assim_long'



   .. py:attribute:: analysis_assim_long_no_da
      :value: 'analysis_assim_long_no_da'



   .. py:attribute:: analysis_assim_hawaii
      :value: 'analysis_assim_hawaii'



   .. py:attribute:: analysis_assim_hawaii_no_da
      :value: 'analysis_assim_hawaii_no_da'



   .. py:attribute:: analysis_assim_puertorico
      :value: 'analysis_assim_puertorico'



   .. py:attribute:: analysis_assim_puertorico_no_da
      :value: 'analysis_assim_puertorico_no_da'



   .. py:attribute:: short_range
      :value: 'short_range'



   .. py:attribute:: short_range_hawaii
      :value: 'short_range_hawaii'



   .. py:attribute:: short_range_puertorico
      :value: 'short_range_puertorico'



   .. py:attribute:: short_range_hawaii_no_da
      :value: 'short_range_hawaii_no_da'



   .. py:attribute:: short_range_puertorico_no_da
      :value: 'short_range_puertorico_no_da'



   .. py:attribute:: medium_range_mem1
      :value: 'medium_range_mem1'



   .. py:attribute:: medium_range_mem2
      :value: 'medium_range_mem2'



   .. py:attribute:: medium_range_mem3
      :value: 'medium_range_mem3'



   .. py:attribute:: medium_range_mem4
      :value: 'medium_range_mem4'



   .. py:attribute:: medium_range_mem5
      :value: 'medium_range_mem5'



   .. py:attribute:: medium_range_mem6
      :value: 'medium_range_mem6'



   .. py:attribute:: medium_range_mem7
      :value: 'medium_range_mem7'



   .. py:attribute:: long_range_mem1
      :value: 'long_range_mem1'



   .. py:attribute:: long_range_mem2
      :value: 'long_range_mem2'



   .. py:attribute:: long_range_mem3
      :value: 'long_range_mem3'



   .. py:attribute:: long_range_mem4
      :value: 'long_range_mem4'



   .. py:attribute:: forcing_medium_range
      :value: 'forcing_medium_range'



   .. py:attribute:: forcing_short_range
      :value: 'forcing_short_range'



   .. py:attribute:: forcing_short_range_hawaii
      :value: 'forcing_short_range_hawaii'



   .. py:attribute:: forcing_short_range_puertorico
      :value: 'forcing_short_range_puertorico'



   .. py:attribute:: forcing_analysis_assim
      :value: 'forcing_analysis_assim'



   .. py:attribute:: forcing_analysis_assim_extend
      :value: 'forcing_analysis_assim_extend'



   .. py:attribute:: forcing_analysis_assim_hawaii
      :value: 'forcing_analysis_assim_hawaii'



   .. py:attribute:: forcing_analysis_assim_puertorico
      :value: 'forcing_analysis_assim_puertorico'




.. py:class:: GridConfigurationModel(**data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.5/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of classvars defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The signature for instantiating the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a `RootModel`.
       __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.
       __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.

       __pydantic_extra__: An instance attribute with the values of extra fields from validation when
           `model_config['extra'] == 'allow'`.
       __pydantic_fields_set__: An instance attribute with the names of fields explicitly set.
       __pydantic_private__: Instance attribute with the values of private attributes set on the model instance.

   .. py:attribute:: configuration
      :type: ConfigurationsEnum



   .. py:attribute:: analysis_assim
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_no_da
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_extend
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_extend_no_da
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_long
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_long_no_da
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_hawaii
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_hawaii_no_da
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_puertorico
      :type: Optional[Analysis]



   .. py:attribute:: analysis_assim_puertorico_no_da
      :type: Optional[Analysis]



   .. py:attribute:: short_range
      :type: Optional[ShortRange]



   .. py:attribute:: short_range_hawaii
      :type: Optional[ShortRange]



   .. py:attribute:: short_range_puertorico
      :type: Optional[ShortRange]



   .. py:attribute:: short_range_hawaii_no_da
      :type: Optional[ShortRange]



   .. py:attribute:: short_range_puertorico_no_da
      :type: Optional[ShortRange]



   .. py:attribute:: medium_range_mem1
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem2
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem3
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem4
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem5
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem6
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_mem7
      :type: Optional[MediumRange]



   .. py:attribute:: medium_range_no_da
      :type: Optional[MediumRange]



   .. py:attribute:: long_range_mem1
      :type: Optional[LongRange]



   .. py:attribute:: long_range_mem2
      :type: Optional[LongRange]



   .. py:attribute:: long_range_mem3
      :type: Optional[LongRange]



   .. py:attribute:: long_range_mem4
      :type: Optional[LongRange]



   .. py:attribute:: forcing_medium_range
      :type: Optional[Forcing]



   .. py:attribute:: forcing_short_range
      :type: Optional[Forcing]



   .. py:attribute:: forcing_short_range_hawaii
      :type: Optional[Forcing]



   .. py:attribute:: forcing_short_range_puertorico
      :type: Optional[Forcing]



   .. py:attribute:: forcing_analysis_assim
      :type: Optional[Forcing]



   .. py:attribute:: forcing_analysis_assim_extend
      :type: Optional[Forcing]



   .. py:attribute:: forcing_analysis_assim_hawaii
      :type: Optional[Forcing]



   .. py:attribute:: forcing_analysis_assim_puertorico
      :type: Optional[Forcing]




.. py:data:: configuration
   :value: 'forcing_medium_range'
