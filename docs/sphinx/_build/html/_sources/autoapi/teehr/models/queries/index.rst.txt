:py:mod:`teehr.models.queries`
==============================

.. py:module:: teehr.models.queries

.. autoapi-nested-parse::

   Module for parquet-based query models.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   teehr.models.queries.BaseModel
   teehr.models.queries.FilterOperatorEnum
   teehr.models.queries.MetricEnum
   teehr.models.queries.JoinedFilterFieldEnum
   teehr.models.queries.TimeseriesFilterFieldEnum
   teehr.models.queries.JoinedFilter
   teehr.models.queries.TimeseriesFilter
   teehr.models.queries.MetricQuery
   teehr.models.queries.JoinedTimeseriesQuery
   teehr.models.queries.TimeseriesQuery
   teehr.models.queries.TimeseriesCharQuery




.. py:class:: BaseModel(/, **data: Any)


   Bases: :py:obj:`pydantic.BaseModel`

   
   Basemodel configuration.
















   ..
       !! processed by numpydoc !!
   .. py:class:: ConfigDict


      
      ConfigDict.
















      ..
          !! processed by numpydoc !!
      .. py:attribute:: arbitrary_types_allowed
         :value: True

         



.. py:class:: FilterOperatorEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   
   Filter symbols.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: eq
      :value: '='

      

   .. py:attribute:: gt
      :value: '>'

      

   .. py:attribute:: lt
      :value: '<'

      

   .. py:attribute:: gte
      :value: '>='

      

   .. py:attribute:: lte
      :value: '<='

      

   .. py:attribute:: islike
      :value: 'like'

      

   .. py:attribute:: isin
      :value: 'in'

      


.. py:class:: MetricEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   
   Available metrics.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: primary_count
      :value: 'primary_count'

      

   .. py:attribute:: secondary_count
      :value: 'secondary_count'

      

   .. py:attribute:: primary_minimum
      :value: 'primary_minimum'

      

   .. py:attribute:: secondary_minimum
      :value: 'secondary_minimum'

      

   .. py:attribute:: primary_maximum
      :value: 'primary_maximum'

      

   .. py:attribute:: secondary_maximum
      :value: 'secondary_maximum'

      

   .. py:attribute:: primary_average
      :value: 'primary_average'

      

   .. py:attribute:: secondary_average
      :value: 'secondary_average'

      

   .. py:attribute:: primary_sum
      :value: 'primary_sum'

      

   .. py:attribute:: secondary_sum
      :value: 'secondary_sum'

      

   .. py:attribute:: primary_variance
      :value: 'primary_variance'

      

   .. py:attribute:: secondary_variance
      :value: 'secondary_variance'

      

   .. py:attribute:: max_value_delta
      :value: 'max_value_delta'

      

   .. py:attribute:: bias
      :value: 'bias'

      

   .. py:attribute:: nash_sutcliffe_efficiency
      :value: 'nash_sutcliffe_efficiency'

      

   .. py:attribute:: kling_gupta_efficiency
      :value: 'kling_gupta_efficiency'

      

   .. py:attribute:: mean_error
      :value: 'mean_error'

      

   .. py:attribute:: mean_squared_error
      :value: 'mean_squared_error'

      

   .. py:attribute:: root_mean_squared_error
      :value: 'root_mean_squared_error'

      

   .. py:attribute:: primary_max_value_time
      :value: 'primary_max_value_time'

      

   .. py:attribute:: secondary_max_value_time
      :value: 'secondary_max_value_time'

      

   .. py:attribute:: max_value_timedelta
      :value: 'max_value_timedelta'

      


.. py:class:: JoinedFilterFieldEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   
   Joined filter fields.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: value_time
      :value: 'value_time'

      

   .. py:attribute:: reference_time
      :value: 'reference_time'

      

   .. py:attribute:: secondary_location_id
      :value: 'secondary_location_id'

      

   .. py:attribute:: secondary_value
      :value: 'secondary_value'

      

   .. py:attribute:: configuration
      :value: 'configuration'

      

   .. py:attribute:: measurement_unit
      :value: 'measurement_unit'

      

   .. py:attribute:: variable_name
      :value: 'variable_name'

      

   .. py:attribute:: primary_value
      :value: 'primary_value'

      

   .. py:attribute:: primary_location_id
      :value: 'primary_location_id'

      

   .. py:attribute:: lead_time
      :value: 'lead_time'

      

   .. py:attribute:: geometry
      :value: 'geometry'

      


.. py:class:: TimeseriesFilterFieldEnum


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   
   Timeseries filter fields.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: value_time
      :value: 'value_time'

      

   .. py:attribute:: reference_time
      :value: 'reference_time'

      

   .. py:attribute:: location_id
      :value: 'location_id'

      

   .. py:attribute:: value
      :value: 'value'

      

   .. py:attribute:: configuration
      :value: 'configuration'

      

   .. py:attribute:: measurement_unit
      :value: 'measurement_unit'

      

   .. py:attribute:: variable_name
      :value: 'variable_name'

      

   .. py:attribute:: lead_time
      :value: 'lead_time'

      

   .. py:attribute:: geometry
      :value: 'geometry'

      


.. py:class:: JoinedFilter(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Joined filter model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: column
      :type: JoinedFilterFieldEnum

      

   .. py:attribute:: operator
      :type: FilterOperatorEnum

      

   .. py:attribute:: value
      :type: Union[str, int, float, datetime.datetime, List[Union[str, int, float, datetime.datetime]]]

      

   .. py:method:: is_iterable_not_str()

      
      Check if is type Iterable and not str.
















      ..
          !! processed by numpydoc !!

   .. py:method:: in_operator_must_have_iterable(v, info: pydantic.ValidationInfo)

      
      Ensure that an 'in' operator has an iterable type.
















      ..
          !! processed by numpydoc !!


.. py:class:: TimeseriesFilter(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Timeseries filter model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: column
      :type: TimeseriesFilterFieldEnum

      

   .. py:attribute:: operator
      :type: FilterOperatorEnum

      

   .. py:attribute:: value
      :type: Union[str, int, float, datetime.datetime, List[Union[str, int, float, datetime.datetime]]]

      

   .. py:method:: is_iterable_not_str()

      
      Check if is type Iterable and not str.
















      ..
          !! processed by numpydoc !!

   .. py:method:: in_operator_must_have_iterable(v, info: pydantic.ValidationInfo)

      
      Ensure that an 'in' operator has an iterable type.
















      ..
          !! processed by numpydoc !!


.. py:class:: MetricQuery(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Metric query model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: primary_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: secondary_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: crosswalk_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: group_by
      :type: List[JoinedFilterFieldEnum]

      

   .. py:attribute:: order_by
      :type: List[JoinedFilterFieldEnum]

      

   .. py:attribute:: include_metrics
      :type: Union[List[MetricEnum], MetricEnum, str]

      

   .. py:attribute:: filters
      :type: Optional[List[JoinedFilter]]
      :value: []

      

   .. py:attribute:: return_query
      :type: bool

      

   .. py:attribute:: geometry_filepath
      :type: Optional[Union[str, pathlib.Path]]

      

   .. py:attribute:: include_geometry
      :type: bool

      

   .. py:attribute:: remove_duplicates
      :type: Optional[bool]
      :value: True

      

   .. py:method:: include_geometry_must_group_by_primary_location_id(v, info: pydantic.ValidationInfo)

      
      Include_geometry must groupby primary_location_id.
















      ..
          !! processed by numpydoc !!

   .. py:method:: filter_must_be_list(v)

      
      Filter must be a list.
















      ..
          !! processed by numpydoc !!


.. py:class:: JoinedTimeseriesQuery(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Joined timeseries query model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: primary_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: secondary_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: crosswalk_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: order_by
      :type: List[JoinedFilterFieldEnum]

      

   .. py:attribute:: filters
      :type: Optional[List[JoinedFilter]]
      :value: []

      

   .. py:attribute:: return_query
      :type: bool

      

   .. py:attribute:: geometry_filepath
      :type: Optional[Union[str, pathlib.Path]]

      

   .. py:attribute:: include_geometry
      :type: bool

      

   .. py:attribute:: remove_duplicates
      :type: Optional[bool]
      :value: True

      

   .. py:method:: include_geometry_must_group_by_primary_location_id(v, info: pydantic.ValidationInfo)

      
      Include_geometry must groupby primary_location_id.
















      ..
          !! processed by numpydoc !!

   .. py:method:: filter_must_be_list(v)

      
      Filter must be a list.
















      ..
          !! processed by numpydoc !!


.. py:class:: TimeseriesQuery(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Timeseries query model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: timeseries_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: order_by
      :type: List[TimeseriesFilterFieldEnum]

      

   .. py:attribute:: filters
      :type: Optional[List[TimeseriesFilter]]
      :value: []

      

   .. py:attribute:: return_query
      :type: bool

      

   .. py:method:: filter_must_be_list(v)

      
      Filter must be a list.
















      ..
          !! processed by numpydoc !!


.. py:class:: TimeseriesCharQuery(/, **data: Any)


   Bases: :py:obj:`BaseModel`

   
   Timeseries char query model.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: timeseries_filepath
      :type: Union[str, pathlib.Path]

      

   .. py:attribute:: order_by
      :type: List[TimeseriesFilterFieldEnum]

      

   .. py:attribute:: group_by
      :type: List[TimeseriesFilterFieldEnum]

      

   .. py:attribute:: filters
      :type: Optional[List[TimeseriesFilter]]
      :value: []

      

   .. py:attribute:: return_query
      :type: bool

      

   .. py:method:: filter_must_be_list(v)

      
      Filter must be a list.
















      ..
          !! processed by numpydoc !!


