:py:mod:`teehr.loading.nwm.retrospective`
=========================================

.. py:module:: teehr.loading.nwm.retrospective

.. autoapi-nested-parse::

   Module for fetchning and processing retrospective NWM point data.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   teehr.loading.nwm.retrospective.validate_start_end_date
   teehr.loading.nwm.retrospective.da_to_df
   teehr.loading.nwm.retrospective.datetime_to_date
   teehr.loading.nwm.retrospective.nwm_retro_to_parquet



Attributes
~~~~~~~~~~

.. autoapisummary::

   teehr.loading.nwm.retrospective.NWM20_MIN_DATE
   teehr.loading.nwm.retrospective.NWM20_MAX_DATE
   teehr.loading.nwm.retrospective.NWM21_MIN_DATE
   teehr.loading.nwm.retrospective.NWM21_MAX_DATE


.. py:data:: NWM20_MIN_DATE



.. py:data:: NWM20_MAX_DATE



.. py:data:: NWM21_MIN_DATE



.. py:data:: NWM21_MAX_DATE



.. py:function:: validate_start_end_date(nwm_version: teehr.models.loading.utils.SupportedNWMRetroVersionsEnum, start_date: Union[str, datetime.datetime], end_date: Union[str, datetime.datetime])


   Validate the start and end dates by NWM version.
















   ..
       !! processed by numpydoc !!

.. py:function:: da_to_df(nwm_version: teehr.models.loading.utils.SupportedNWMRetroVersionsEnum, da: xarray.DataArray) -> pandas.DataFrame


   Format NWM retrospective data to TEEHR format.
















   ..
       !! processed by numpydoc !!

.. py:function:: datetime_to_date(dt: datetime.datetime) -> datetime.datetime


   Convert datetime to date only.
















   ..
       !! processed by numpydoc !!

.. py:function:: nwm_retro_to_parquet(nwm_version: teehr.models.loading.utils.SupportedNWMRetroVersionsEnum, variable_name: str, location_ids: Iterable[int], start_date: Union[str, datetime.datetime, pandas.Timestamp], end_date: Union[str, datetime.datetime, pandas.Timestamp], output_parquet_dir: Union[str, pathlib.Path], chunk_by: Union[teehr.models.loading.utils.ChunkByEnum, None] = None, overwrite_output: Optional[bool] = False)


   Fetch NWM retrospective at NWM COMIDs and store as Parquet file.


   :Parameters:

       **nwm_version** : SupportedNWMRetroVersionsEnum
           NWM retrospective version to fetch.
           Currently `nwm20` and `nwm21` supported.

       **variable_name** : str
           Name of the NWM data variable to download.
           (e.g., "streamflow", "velocity", ...).

       **location_ids** : Iterable[int],
           NWM feature_ids to fetch.

       **start_date** : Union[str, datetime, pd.Timestamp]
           Date to begin data ingest.
           Str formats can include YYYY-MM-DD or MM/DD/YYYY
           Rounds down to beginning of day.

       **end_date** : Union[str, datetime, pd.Timestamp],
           Last date to fetch.  Rounds up to end of day
           Str formats can include YYYY-MM-DD or MM/DD/YYYY.

       **output_parquet_dir** : Union[str, Path],
           Directory where output will be saved.

       **chunk_by** : Union[ChunkByEnum, None] = None,
           If None (default) saves all timeseries to a single file.

       **overwrite_output** : bool = False,
           Whether output should overwrite files if they exist.  Default is False.











   .. rubric:: Examples

   Here we fetch and format retrospective NWM v2.0 streamflow data
   for two locations.

   Import the module.

   >>> import teehr.loading.nwm.retrospective as nwm_retro

   Specify the input variables.

   >>> NWM_VERSION = "nwm20"
   >>> VARIABLE_NAME = "streamflow"
   >>> START_DATE = datetime(2000, 1, 1)
   >>> END_DATE = datetime(2000, 1, 2, 23)
   >>> LOCATION_IDS = [7086109, 7040481]
   >>> OUTPUT_ROOT = Path(Path().home(), "temp")
   >>> OUTPUT_DIR = Path(OUTPUT_ROOT, "nwm20_retrospective")

   Fetch and format the data, writing to the specified directory.

   >>> nwm_retro.nwm_retro_to_parquet(
   >>>     nwm_version=NWM_VERSION,
   >>>     variable_name=VARIABLE_NAME,
   >>>     start_date=START_DATE,
   >>>     end_date=END_DATE,
   >>>     location_ids=LOCATION_IDS,
   >>>     output_parquet_dir=OUTPUT_DIR
   >>> )



   ..
       !! processed by numpydoc !!
