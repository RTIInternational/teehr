:py:mod:`teehr.queries.utils`
=============================

.. py:module:: teehr.queries.utils

.. autoapi-nested-parse::

   A module defining common utilities for queries.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   teehr.queries.utils._get_datetime_list_string
   teehr.queries.utils._format_iterable_value
   teehr.queries.utils._format_filter_item
   teehr.queries.utils.filters_to_sql
   teehr.queries.utils.geometry_join_clause
   teehr.queries.utils.geometry_select_clause
   teehr.queries.utils.geometry_joined_select_clause
   teehr.queries.utils.metric_geometry_join_clause_db
   teehr.queries.utils.metric_geometry_join_clause
   teehr.queries.utils._remove_duplicates_jtq_cte
   teehr.queries.utils._remove_duplicates_mq_cte
   teehr.queries.utils._join_time_on
   teehr.queries.utils._join_on
   teehr.queries.utils._nse_cte
   teehr.queries.utils._join_nse_cte
   teehr.queries.utils._select_max_value_timedelta
   teehr.queries.utils._select_secondary_max_value_time
   teehr.queries.utils._select_primary_max_value_time
   teehr.queries.utils._select_root_mean_squared_error
   teehr.queries.utils._select_mean_squared_error
   teehr.queries.utils._select_mean_error
   teehr.queries.utils._select_kling_gupta_efficiency
   teehr.queries.utils._select_nash_sutcliffe_efficiency
   teehr.queries.utils._select_bias
   teehr.queries.utils._select_max_value_delta
   teehr.queries.utils._select_primary_count
   teehr.queries.utils._select_secondary_count
   teehr.queries.utils._select_primary_minimum
   teehr.queries.utils._select_secondary_minimum
   teehr.queries.utils._select_primary_maximum
   teehr.queries.utils._select_secondary_maximum
   teehr.queries.utils._select_primary_average
   teehr.queries.utils._select_secondary_average
   teehr.queries.utils._select_primary_sum
   teehr.queries.utils._select_secondary_sum
   teehr.queries.utils._select_primary_variance
   teehr.queries.utils._select_secondary_variance
   teehr.queries.utils.df_to_gdf
   teehr.queries.utils.remove_empty_lines



Attributes
~~~~~~~~~~

.. autoapisummary::

   teehr.queries.utils.SQL_DATETIME_STR_FORMAT


.. py:data:: SQL_DATETIME_STR_FORMAT
   :value: '%Y-%m-%d %H:%M:%S'

   

.. py:function:: _get_datetime_list_string(values)

   
   Get a datetime list as a list of strings.
















   ..
       !! processed by numpydoc !!

.. py:function:: _format_iterable_value(values: collections.abc.Iterable[Union[str, int, float, datetime.datetime]]) -> str

   
   Return an SQL formatted string from list of values.


   :Parameters:

       **values** : Iterable
           Contains values to be formatted as a string for SQL. Only one type of
           value (str, int, float, datetime) should be used. First value in list
           is used to determine value type. Values are not checked for type
           consistency.

   :Returns:

       str
           An SQL formatted string from list of values.













   ..
       !! processed by numpydoc !!

.. py:function:: _format_filter_item(filter: Union[teehr.models.queries.JoinedFilter, teehr.models.queries.TimeseriesFilter, teehr.models.queries_database.Filter]) -> str

   
   Return an SQL formatted string for single filter object.


   :Parameters:

       **filter** : models.\*Filter
           A single \*Filter object.

   :Returns:

       str
           An SQL formatted string for single filter object.













   ..
       !! processed by numpydoc !!

.. py:function:: filters_to_sql(filters: Union[List[teehr.models.queries.JoinedFilter], List[teehr.models.queries_database.Filter]]) -> List[str]

   
   Generate SQL where clause string from filters.


   :Parameters:

       **filters** : Union[List[tmq.JoinedFilter], List[tmqd.Filter]]
           A list of Filter objects describing the filters.

   :Returns:

       str
           A where clause formatted string.













   ..
       !! processed by numpydoc !!

.. py:function:: geometry_join_clause(q: Union[teehr.models.queries.MetricQuery, teehr.models.queries.JoinedTimeseriesQuery]) -> str

   
   Generate the join clause for geometry.
















   ..
       !! processed by numpydoc !!

.. py:function:: geometry_select_clause(q: Union[teehr.models.queries.MetricQuery, teehr.models.queries.JoinedTimeseriesQuery, teehr.models.queries_database.MetricQuery, teehr.models.queries_database.JoinedTimeseriesQuery]) -> str

   
   "Generate the geometry select clause.
















   ..
       !! processed by numpydoc !!

.. py:function:: geometry_joined_select_clause(q: Union[teehr.models.queries.MetricQuery, teehr.models.queries.JoinedTimeseriesQuery]) -> str

   
   Generate the geometry select clause for a database.
















   ..
       !! processed by numpydoc !!

.. py:function:: metric_geometry_join_clause_db(q: Union[teehr.models.queries_database.MetricQuery, teehr.models.queries_database.JoinedTimeseriesQuery]) -> str

   
   Generate the metric geometry join clause for a database.
















   ..
       !! processed by numpydoc !!

.. py:function:: metric_geometry_join_clause(q: Union[teehr.models.queries.MetricQuery, teehr.models.queries.JoinedTimeseriesQuery]) -> str

   
   Generate the metric geometry join clause.
















   ..
       !! processed by numpydoc !!

.. py:function:: _remove_duplicates_jtq_cte(q: teehr.models.queries.JoinedTimeseriesQuery) -> str

   
   Generate the remove duplicates CTE for the JoinedTimeseriesQuery.
















   ..
       !! processed by numpydoc !!

.. py:function:: _remove_duplicates_mq_cte(q: teehr.models.queries.MetricQuery) -> str

   
   Generate the remove duplicates CTE for the MetricQuery.
















   ..
       !! processed by numpydoc !!

.. py:function:: _join_time_on(join: str, join_to: str, join_on: List[str])

   
   Generate the join time on query.
















   ..
       !! processed by numpydoc !!

.. py:function:: _join_on(join: str, join_to: str, join_on: List[str]) -> str

   
   Generate the join on query.
















   ..
       !! processed by numpydoc !!

.. py:function:: _nse_cte(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the nash-sutcliffe-efficiency CTE.
















   ..
       !! processed by numpydoc !!

.. py:function:: _join_nse_cte(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the join nash-sutcliffe-efficiency CTE.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_max_value_timedelta(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select max value timedelta query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_max_value_time(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary max value time query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_max_value_time(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary max value time query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_root_mean_squared_error(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select root mean squared error query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_mean_squared_error(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select mean squared error query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_mean_error(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select mean error query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_kling_gupta_efficiency(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select kling gupta efficiency query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_nash_sutcliffe_efficiency(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select nash sutcliffe efficiency query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_bias(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select bias  query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_max_value_delta(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select max value delta query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_count(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary count query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_count(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary count query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_minimum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary minimum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_minimum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary minimum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_maximum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary maximum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_maximum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary maximum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_average(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary average query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_average(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary average query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_sum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary sum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_sum(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary sum query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_primary_variance(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select primary variance query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: _select_secondary_variance(mq: Union[teehr.models.queries.MetricQuery, teehr.models.queries_database.MetricQuery]) -> str

   
   Generate the select secondary variance query segment.
















   ..
       !! processed by numpydoc !!

.. py:function:: df_to_gdf(df: pandas.DataFrame) -> geopandas.GeoDataFrame

   
   Convert pd.DataFrame to gpd.GeoDataFrame.

   When the `geometry` column is read from a parquet file using DuckBD
   it is a bytearray in the resulting pd.DataFrame.  The `geometry` needs
   to be convert to bytes before GeoPandas can work with it.  This function
   does that.

   :Parameters:

       **df** : pd.DataFrame
           DataFrame with a `geometry` column that has geometry stored as
           a bytearray.

   :Returns:

       gpd.GeoDataFrame
           GeoDataFrame with a valid `geometry` column.













   ..
       !! processed by numpydoc !!

.. py:function:: remove_empty_lines(text: str) -> str

   
   Remove empty lines from string.
















   ..
       !! processed by numpydoc !!

