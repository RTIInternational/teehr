:py:mod:`teehr.queries.pandas`
==============================

.. py:module:: teehr.queries.pandas

.. autoapi-nested-parse::

   A module for defining SQL queries against Pandas DataFrames.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   teehr.queries.pandas.get_metrics
   teehr.queries.pandas.calculate_group_metrics



Attributes
~~~~~~~~~~

.. autoapisummary::

   teehr.queries.pandas.SQL_DATETIME_STR_FORMAT


.. py:data:: SQL_DATETIME_STR_FORMAT
   :value: '%Y-%m-%d %H:%M:%S'

   

.. py:function:: get_metrics(primary_filepath: str, secondary_filepath: str, crosswalk_filepath: str, group_by: List[str], order_by: List[str], include_metrics: Union[List[teehr.models.queries.MetricEnum], all], filters: Union[List[dict], None] = None, return_query: bool = False, geometry_filepath: Union[str, None] = None, include_geometry: bool = False) -> Union[str, pandas.DataFrame, geopandas.GeoDataFrame]

   
   Calculate performance metrics using a Pandas or Dask DataFrame.


   :Parameters:

       **primary_filepath** : str
           File path to the "observed" data.  String must include path to file(s)
           and can include wildcards.  For example, "/path/to/parquet/\*.parquet".

       **secondary_filepath** : str
           File path to the "forecast" data.  String must include path to file(s)
           and can include wildcards.  For example, "/path/to/parquet/\*.parquet".

       **crosswalk_filepath** : str
           File path to single crosswalk file.

       **group_by** : List[str]
           List of column/field names to group timeseries data by.
           Must provide at least one.

       **order_by** : List[str]
           List of column/field names to order results by.
           Must provide at least one.

       **include_metrics** : List[str]
           List of metrics (see below) for allowable list, or "all" to return all.

       **filters** : Union[List[dict], None] = None
           List of dictionaries describing the "where" clause to limit data that
           is included in metrics.

       **return_query** : bool = False
           True returns the query string instead of the data.

       **include_geometry** : bool = True
           True joins the geometry to the query results.
           Only works if `primary_location_id`
           is included as a group_by field.

   :Returns:

       Union[str, pd.DataFrame, gpd.GeoDataFrame]
           The query string or a DataFrame or GeoDataFrame of query results.








   .. rubric:: Notes

   Basic Metrics:

   * primary_count
   * secondary_count
   * primary_minimum
   * secondary_minimum
   * primary_maximum
   * secondary_maximum
   * primary_average
   * secondary_average
   * primary_sum
   * secondary_sum
   * primary_variance
   * secondary_variance
   * max_value_delta

     * max(secondary_value) - max(primary_value)
   * bias

     * sum(primary_value - secondary_value)/count(*)

   HydroTools Metrics:

   * nash_sutcliffe_efficiency
   * kling_gupta_efficiency
   * coefficient_of_extrapolation
   * coefficient_of_persistence
   * mean_error
   * mean_squared_error
   * root_mean_squared_error

   Time-based Metrics:

   * primary_max_value_time
   * secondary_max_value_time
   * max_value_timedelta





   ..
       !! processed by numpydoc !!

.. py:function:: calculate_group_metrics(group: pandas.DataFrame, include_metrics: Union[List[str], str])

   
   Calculate metrics on a pd.DataFrame.


   :Parameters:

       **group** : pd.DataFrame
           Represents a population group to calculate the metrics on.

       **include_metrics** : List[str]
           List of metrics (see below) for allowable list, or "all" to
           return all.

   :Returns:

       pd.DataFrame
           A DataFrame of calculated metrics.








   .. rubric:: Notes

   This approach to calculating metrics is not as fast as
   `teehr.queries.duckdb.get_metrics()` but is easier to update
   and contains more metrics.  It also serves as the reference
   implementation for the duckdb queries.

   Basic Metrics:

   * primary_count
   * secondary_count
   * primary_minimum
   * secondary_minimum
   * primary_maximum
   * secondary_maximum
   * primary_average
   * secondary_average
   * primary_sum
   * secondary_sum
   * primary_variance
   * secondary_variance
   * max_value_delta

     * max(secondary_value) - max(primary_value)
   * bias

     * sum(primary_value - secondary_value)/count(*)

   HydroTools Metrics:

   * nash_sutcliffe_efficiency
   * kling_gupta_efficiency
   * coefficient_of_extrapolation
   * coefficient_of_persistence
   * mean_error
   * mean_squared_error
   * root_mean_squared_error

   Time-based Metrics:
   * primary_max_value_time
   * secondary_max_value_time
   * max_value_timedelta





   ..
       !! processed by numpydoc !!

